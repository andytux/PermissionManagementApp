@inject AuthService AuthService
@inject RoleService RoleService

@if (!isLoaded)
{
    <p>Lade Berechtigungen...</p>
}
else if (hasPermission)
{
    @ChildContent
}
else
{
    <p>You have no access with your user.</p>
    <ProtectedPage />
}

@code {
    [Parameter] public string Permission { get; set; } = string.Empty;
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool hasPermission = false;
    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        var userId = AuthService.GetCurrentUserId();

        if (userId.HasValue)
        {
            var requiredPermissions = Permission
                .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

            foreach (var perm in requiredPermissions)
            {
                if (await RoleService.HasPermissionAsync(userId.Value, perm))
                {
                    hasPermission = true;
                    break;
                }
            }
        }

        isLoaded = true;

        StateHasChanged();
    }
}
