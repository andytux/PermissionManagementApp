@page "/assignUserGroups"

@inject UserService UserService
@inject GroupService GroupService
@inject UserGroupService UserGroupService


<h3>AssignUserGroups</h3>

<select @bind="selectedUserId">
	<option value="">Choose user</option>
	@foreach (var user in users)
	{
		<option value="@user.Id">@user.Name</option>
	}
</select>

<select @bind="selectedGroupId">
	<option value="">Choose group</option>
	@foreach (var group in groups)
	{
		<option value="@group.Id">@group.Name</option>
	}
</select>

<button @onclick="AssignUserToGroup">Assigne</button>

@if (userGroups != null)
{
	<h4>Current groups of user</h4>
	<ul>
		@foreach (var group in userGroups)
		{
			<li>
				@group.Name <button @onclick="() => RemoveUserFromGroup(group.Id)">Delete</button>
			</li>
		}
	</ul>
}


@code {
	private List<User> users = new();
	private List<Group> groups = new();
	private List<Group> userGroups = new();

	private int selectedUserId;
	private int selectedGroupId;

	protected override async Task OnInitializedAsync()
	{
		users = await UserService.GetAllUsersAsync();
		groups = await GroupService.GetAllGroupsAsync();
	}

	private async Task AssignUserToGroup()
	{
		if (selectedUserId != 0 || selectedGroupId != 0)
		{
			await UserGroupService.AssignUserToGroupAsync(selectedUserId, selectedGroupId);
			userGroups = await UserGroupService.GetUserGroupsAsync(selectedUserId);
			StateHasChanged();
		}
	}

	private async Task RemoveUserFromGroup(int groupId)
	{
		await UserGroupService.RemoveUserFromGroupAsync(selectedUserId, groupId);
		userGroups = await UserGroupService.GetUserGroupsAsync(selectedUserId);

		StateHasChanged();
	}

}
